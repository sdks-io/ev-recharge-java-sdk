/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.shell.apitest.ApiHelper;
import com.shell.apitest.ShellEVClient;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.models.ActiveResponse200Json;
import com.shell.apitest.models.ChargesessionStartBody;
import com.shell.apitest.models.InlineResponse202;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ChargingControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static ShellEVClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ChargingController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getChargingController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This API initiates to start a session on a EVSE (Electric Vehicle Supply Equipement). When
     * the EV Charge Card number and the unique EVSE ID on the location is provided, the session is
     * initiated. Please note that this is an asynchronous request, the request will be passed on to
     * the operator/platform to be processed further. .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestStartChargeSession() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "eb621f45-a543-4d9a-a934-2f223b263c42");
        ChargesessionStartBody body = null;

        // Set callback and perform API call
        InlineResponse202 result = null;
        try {
            result = controller.startChargeSession(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"SessionId\":\"c3e332f0-1bb2-4f50-a96b-e075bbb71e68\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This API retrieves the list of active sessions for a given set of EMAIds.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestActive() throws Exception {
        // Parameters for the API call
        String emaId = 
                "NL-TNM-C0216599X-A";
        UUID requestId = UUID.fromString(
                "eb621f45-a543-4d9a-a934-2f223b263c42");

        // Set callback and perform API call
        ActiveResponse200Json result = null;
        try {
            result = controller.active(emaId, requestId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"EmaId\":\"NL-TNM-C0216599X-A\",\"EvseId\":\"NL*TNM*EVIRTUALCP0002*0\","
                + "\"Id\":\"260f17a9-52d4-4b40-ae74-83832b538975\",\"StartedAt\":\"2022-10-21T09:11"
                + ":23.455Z\",\"SessionState\":\"started\",\"SessionCode\":null,\"SessionMessage\":"
                + "null,\"UserId\":\"96f69b3b-8ad4-487a-baaa-f1d3db741e88\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
