/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.shell.api.ApiHelper;
import com.shell.api.ShellEVClient;
import com.shell.api.exceptions.ApiException;
import com.shell.api.models.ActiveResponse200Json;
import com.shell.api.models.ChargesessionStartBody;
import com.shell.api.models.GetChargeSessionRetrieveResponse200Json;
import com.shell.api.models.InlineResponse202;
import com.shell.api.models.InlineResponse2021;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ChargingControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static ShellEVClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ChargingController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getChargingController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This endpoint start the charging session for the user.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestStart() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "123e4567-e89b-12d3-a456-426614174000");
        ChargesessionStartBody body = null;

        // Set callback and perform API call
        InlineResponse202 result = null;
        try {
            result = controller.start(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"requestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"status\":\"SUCCESS\",\"d"
                + "ata\":[{\"sessionId\":\"c3e332f0-1bb2-4f50-a96b-e075bbb71e68\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Accepts a request to stop an active session when a valid session id is provided.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestStop() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "123e4567-e89b-12d3-a456-426614174000");
        String sessionId = 
                "c3e332f0-1bb2-4f50-a96b-e075bbb71e68";

        // Set callback and perform API call
        InlineResponse2021 result = null;
        try {
            result = controller.stop(requestId, sessionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"requestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"status\":\"SUCCESS\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This endpoint returns the details of the session if the session is found.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetChargeSessionRetrieve() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "123e4567-e89b-12d3-a456-426614174000");
        String sessionId = 
                "c3e332f0-1bb2-4f50-a96b-e075bbb71e68";

        // Set callback and perform API call
        GetChargeSessionRetrieveResponse200Json result = null;
        try {
            result = controller.getChargeSessionRetrieve(requestId, sessionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"requestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"status\":\"SUCCESS\",\"d"
                + "ata\":[{\"id\":\"78b5d7a3-bdba-43d7-9851-1c84fcddb782\",\"userId\":\"281482b6-2c"
                + "9a-4fd1-b3ea-1928edb40ef9\",\"emaId\":\"NL-TNM-C00122045-K\",\"evseId\":\"NL*TNM"
                + "*E02003451*0\",\"lastUpdated\":\"2024-06-19T07:36:57.985998Z\",\"startedAt\":\"2"
                + "024-06-19T11:20:27Z\",\"stoppedAt\":\"2014-06-19T12:20:27Z\",\"sessionState\":{"
                + "\"status\":\"Started\"}}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Fetrches the active sessions for user.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestActive() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "123e4567-e89b-12d3-a456-426614174000");
        String emaId = 
                "NL-TNM-C0216599X-A";

        // Set callback and perform API call
        ActiveResponse200Json result = null;
        try {
            result = controller.active(requestId, emaId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"requestId\":\"9d2dee33-7803-485a-a2b1-2c7538e597ee\",\"status\":\"SUCCESS\",\"d"
                + "ata\":[{\"id\":\"78b5d7a3-bdba-43d7-9851-1c84fcddb782\",\"userId\":\"281482b6-2c"
                + "9a-4fd1-b3ea-1928edb40ef9\",\"emaId\":\"NL-TNM-C00122045-K\",\"evseId\":\"NL*TNM"
                + "*E02003451*0\",\"startedAt\":\"2015-08-19T11:20:27Z\",\"stoppedAt\":\"2015-08-19"
                + "T11:20:27Z\",\"SessionState\":{\"status\":\"Started\"},\"lastUpdated\":\"2024-07"
                + "-17T07:36:57.985998Z\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
