/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.shell.api.ApiHelper;
import com.shell.api.ShellEVClient;
import com.shell.api.exceptions.ApiException;
import com.shell.api.models.GetEVLocationsAuthorizationMethodsEnum;
import com.shell.api.models.GetEVLocationsConnectorTypesEnum;
import com.shell.api.models.GetEVLocationsEvseStatusEnum;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class LocationsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static ShellEVClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static LocationsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getLocationsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This API provides the list of all Shell Recharge locations. The list includes all Shell
     * Recharge network and all locations available through our roaming partners. The end point
     * provides flexible search criteria in order to get the list of Shell Recharge Network. The end
     * point provides the details such as the exact location/address of the site along with the
     * up-to-date status information of all the charging units in the site. Supported Search Options
     * * Based on status of the Charging units. Eg : Available or Occupied * Based on available
     * connector types. * Based on minimum Power output (in kW) available * Based on a specific
     * charging unit ID (EVSE ID).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetEVLocations() throws Exception {
        // Parameters for the API call
        UUID requestId = UUID.fromString(
                "123e4567-e89b-12d3-a456-426614174000");
        GetEVLocationsEvseStatusEnum evseStatus = null;
        GetEVLocationsConnectorTypesEnum connectorTypes = null;
        Double connectorMinPower = null;
        GetEVLocationsAuthorizationMethodsEnum authorizationMethods = null;
        Boolean withOperatorName = null;
        String evseId = 
                "NL*TNM*E01000401*0";
        String locationExternalId = null;
        String evseExternalId = null;
        Integer pageNumber = null;
        Integer perPage = null;
        String updatedSince = null;
        List<String> country = ApiHelper.deserializeArray(
                "[\"NED\"]",
                String[].class);
        List<String> excludeCountry = ApiHelper.deserializeArray(
                "[\"NED\"]",
                String[].class);

        // Set callback and perform API call
        try {
            controller.getEVLocations(requestId, evseStatus, connectorTypes, connectorMinPower, authorizationMethods, withOperatorName, evseId, locationExternalId, evseExternalId, pageNumber, perPage, updatedSince, country, excludeCountry);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
