/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.shell.apitest.ApiHelper;
import com.shell.apitest.Server;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.exceptions.HTTP401ErrorResponseException;
import com.shell.apitest.exceptions.M400ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M401ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M404ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M405ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M429ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M500ErrorResponseError1Exception;
import com.shell.apitest.exceptions.M503ErrorResponseError1Exception;
import com.shell.apitest.http.request.HttpMethod;
import com.shell.apitest.models.ActiveResponse200Json;
import com.shell.apitest.models.ChargesessionStartBody;
import com.shell.apitest.models.GetChargeSessionRetrieveResponse200Json;
import com.shell.apitest.models.InlineResponse202;
import com.shell.apitest.models.InlineResponse2021;
import com.shell.apitest.models.StopChargeSessionRequestBodyJson;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ChargingController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ChargingController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This API initiates to start a session on a EVSE (Electric Vehicle Supply Equipement). When
     * the EV Charge Card number and the unique EVSE ID on the location is provided, the session is
     * initiated. Please note that this is an asynchronous request, the request will be passed on to
     * the operator/platform to be processed further.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the InlineResponse202 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InlineResponse202 startChargeSession(
            final UUID requestId,
            final ChargesessionStartBody body) throws ApiException, IOException {
        return prepareStartChargeSessionRequest(requestId, body).execute();
    }

    /**
     * This API initiates to start a session on a EVSE (Electric Vehicle Supply Equipement). When
     * the EV Charge Card number and the unique EVSE ID on the location is provided, the session is
     * initiated. Please note that this is an asynchronous request, the request will be passed on to
     * the operator/platform to be processed further.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  body  Optional parameter: Example:
     * @return    Returns the InlineResponse202 response from the API call
     */
    public CompletableFuture<InlineResponse202> startChargeSessionAsync(
            final UUID requestId,
            final ChargesessionStartBody body) {
        try { 
            return prepareStartChargeSessionRequest(requestId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startChargeSession.
     */
    private ApiCall<InlineResponse202, ApiException> prepareStartChargeSessionRequest(
            final UUID requestId,
            final ChargesessionStartBody body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<InlineResponse202, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/ev/v1/charge-session/start")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("RequestId")
                                .value(String.valueOf(requestId)).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InlineResponse202.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request\n",
                                (reason, context) -> new M400ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new HTTP401ErrorResponseException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Invalid charge token with given EmaId was not found.\n\nBackend HTTP 410 should be transformed to 404.",
                                (reason, context) -> new M404ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Method Not Allowed",
                                (reason, context) -> new M405ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new M429ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new M500ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed",
                                (reason, context) -> new M503ErrorResponseError1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API stops a session by providing the session ID which was retrieved when starting the
     * session. HTTP 202 response will be returned if the request is accepted. Once the session is
     * stopped the response will contain the DateTime on which it is stopped. operationId: Stop.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  uuid  Required parameter: Unique session ID which was generated to activate a
     *         charging session.
     * @param  body  Optional parameter: Example:
     * @return    Returns the InlineResponse2021 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InlineResponse2021 stopChargeSession(
            final UUID requestId,
            final UUID uuid,
            final StopChargeSessionRequestBodyJson body) throws ApiException, IOException {
        return prepareStopChargeSessionRequest(requestId, uuid, body).execute();
    }

    /**
     * This API stops a session by providing the session ID which was retrieved when starting the
     * session. HTTP 202 response will be returned if the request is accepted. Once the session is
     * stopped the response will contain the DateTime on which it is stopped. operationId: Stop.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  uuid  Required parameter: Unique session ID which was generated to activate a
     *         charging session.
     * @param  body  Optional parameter: Example:
     * @return    Returns the InlineResponse2021 response from the API call
     */
    public CompletableFuture<InlineResponse2021> stopChargeSessionAsync(
            final UUID requestId,
            final UUID uuid,
            final StopChargeSessionRequestBodyJson body) {
        try { 
            return prepareStopChargeSessionRequest(requestId, uuid, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for stopChargeSession.
     */
    private ApiCall<InlineResponse2021, ApiException> prepareStopChargeSessionRequest(
            final UUID requestId,
            final UUID uuid,
            final StopChargeSessionRequestBodyJson body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<InlineResponse2021, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/ev/v1/charge-session/stop/{uuid}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("uuid").value(uuid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("RequestId")
                                .value(String.valueOf(requestId)).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, InlineResponse2021.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request\n",
                                (reason, context) -> new M400ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new M401ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Session not found or Session has already been stopped. Map 410 Error message into 404.",
                                (reason, context) -> new M404ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Method Not Allowed",
                                (reason, context) -> new M405ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new M429ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new M500ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed\n",
                                (reason, context) -> new M503ErrorResponseError1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API retrieves the status and details of the session which was started by the user. The
     * session ID generated earlier needs to be passed in this API in order to retrieve the status.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  sessionId  Required parameter: Session Id is to be fetched
     * @param  uuid  Required parameter: Unique session ID which was generated to activate a
     *         charging session.
     * @return    Returns the GetChargeSessionRetrieveResponse200Json response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetChargeSessionRetrieveResponse200Json getChargeSessionRetrieve(
            final UUID requestId,
            final String sessionId,
            final UUID uuid) throws ApiException, IOException {
        return prepareGetChargeSessionRetrieveRequest(requestId, sessionId, uuid).execute();
    }

    /**
     * This API retrieves the status and details of the session which was started by the user. The
     * session ID generated earlier needs to be passed in this API in order to retrieve the status.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  sessionId  Required parameter: Session Id is to be fetched
     * @param  uuid  Required parameter: Unique session ID which was generated to activate a
     *         charging session.
     * @return    Returns the GetChargeSessionRetrieveResponse200Json response from the API call
     */
    public CompletableFuture<GetChargeSessionRetrieveResponse200Json> getChargeSessionRetrieveAsync(
            final UUID requestId,
            final String sessionId,
            final UUID uuid) {
        try { 
            return prepareGetChargeSessionRetrieveRequest(requestId, sessionId, uuid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getChargeSessionRetrieve.
     */
    private ApiCall<GetChargeSessionRetrieveResponse200Json, ApiException> prepareGetChargeSessionRetrieveRequest(
            final UUID requestId,
            final String sessionId,
            final UUID uuid) throws IOException {
        return new ApiCall.Builder<GetChargeSessionRetrieveResponse200Json, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/ev/v1/charge-session/retrieve/{uuid}")
                        .queryParam(param -> param.key("SessionId")
                                .value(sessionId))
                        .templateParam(param -> param.key("uuid").value(uuid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("RequestId")
                                .value(String.valueOf(requestId)).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetChargeSessionRetrieveResponse200Json.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new M400ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new M401ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new M404ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Method Not Allowed",
                                (reason, context) -> new M405ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new M429ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new M500ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Service Unavailable",
                                (reason, context) -> new M503ErrorResponseError1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API retrieves the list of active sessions for a given set of EMAIds.
     * @param  emaId  Required parameter: Emobility Account Identifier(Ema-ID)
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @return    Returns the ActiveResponse200Json response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ActiveResponse200Json active(
            final String emaId,
            final UUID requestId) throws ApiException, IOException {
        return prepareActiveRequest(emaId, requestId).execute();
    }

    /**
     * This API retrieves the list of active sessions for a given set of EMAIds.
     * @param  emaId  Required parameter: Emobility Account Identifier(Ema-ID)
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @return    Returns the ActiveResponse200Json response from the API call
     */
    public CompletableFuture<ActiveResponse200Json> activeAsync(
            final String emaId,
            final UUID requestId) {
        try { 
            return prepareActiveRequest(emaId, requestId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for active.
     */
    private ApiCall<ActiveResponse200Json, ApiException> prepareActiveRequest(
            final String emaId,
            final UUID requestId) throws IOException {
        return new ApiCall.Builder<ActiveResponse200Json, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/ev/v1/charge-session/active")
                        .queryParam(param -> param.key("EmaId")
                                .value(emaId))
                        .headerParam(param -> param.key("RequestId")
                                .value(String.valueOf(requestId)).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ActiveResponse200Json.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request\n",
                                (reason, context) -> new M400ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new M401ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Session not found or Session has already been stopped. Map 410 Error message into 404.",
                                (reason, context) -> new M404ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Method Not Allowed",
                                (reason, context) -> new M405ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too Many Requests",
                                (reason, context) -> new M429ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal Server Error",
                                (reason, context) -> new M500ErrorResponseError1Exception(reason, context)))
                        .localErrorCase("503",
                                 ErrorCase.setReason("Returned when a connectivity failure is encountered like DB connection failed, endpoint failed etc or when max number of retries are completed\n",
                                (reason, context) -> new M503ErrorResponseError1Exception(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}