/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import com.shell.apitest.ApiHelper;
import com.shell.apitest.Server;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.exceptions.BadRequestException;
import com.shell.apitest.exceptions.NotFoundException;
import com.shell.apitest.exceptions.UnauthorizedException;
import com.shell.apitest.http.request.HttpMethod;
import com.shell.apitest.models.GetLocationsListAuthorizationMethodsEnum;
import com.shell.apitest.models.GetLocationsListConnectorTypesEnum;
import com.shell.apitest.models.GetLocationsListEvseStatusEnum;
import com.shell.apitest.models.GetMarkersListAuthorizationMethodsEnum;
import com.shell.apitest.models.GetMarkersListConnectorTypesEnum;
import com.shell.apitest.models.GetMarkersListEvseStatusEnum;
import com.shell.apitest.models.GetNearbyLocationsAuthorizationMethodsEnum;
import com.shell.apitest.models.GetNearbyLocationsConnectorTypesEnum;
import com.shell.apitest.models.GetNearbyLocationsEvseStatusEnum;
import com.shell.apitest.models.LocationResponeObject;
import com.shell.apitest.models.containers.MarkersResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LocationsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LocationsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This API provides the list of all Shell Recharge locations. The list includes all Shell
     * Recharge network and all locations available through our roaming partners.The end point
     * provides flexible search criteria in order to get the list of Shell Recharge Network. The end
     * point provides the details such as the exact location/address of the site along with the
     * up-to-date status information of all the charging units in the site. Supported Search Options
     * * Based on status of the Charging units. Eg : Available or Occupied * Based on available
     * connector types. * Based on minimum Power output (in kW) available * Based on a specific
     * charging unit ID (EVSE ID).
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with the
     *         set of Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker response object
     * @param  evseId  Optional parameter: optional Standard EVSE (Electric Vehicle Supply
     *         Equipment) Id identifier (ISO-IEC-15118)
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given
     *         externalId. (Unique Location externalID provided by Shell Recharge)
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id. (Unique individual EVSE externalID provided by Shell Recharge)
     * @param  pageNumber  Optional parameter: Restrict the response list by providing a specific
     *         set of page Number. Set perPage parameter also when pageNumber is used.
     * @param  perPage  Optional parameter: Restrict the number of sites in reposne per page.
     * @param  updatedSince  Optional parameter: ZonedDateTime as string
     * @return    Returns the List of LocationResponeObject response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<LocationResponeObject> getLocationsList(
            final String requestId,
            final GetLocationsListEvseStatusEnum evseStatus,
            final GetLocationsListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetLocationsListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final String evseId,
            final String locationExternalId,
            final String evseExternalId,
            final Integer pageNumber,
            final Integer perPage,
            final String updatedSince) throws ApiException, IOException {
        return prepareGetLocationsListRequest(requestId, evseStatus, connectorTypes,
                connectorMinPower, authorizationMethods, withOperatorName, evseId,
                locationExternalId, evseExternalId, pageNumber, perPage, updatedSince).execute();
    }

    /**
     * This API provides the list of all Shell Recharge locations. The list includes all Shell
     * Recharge network and all locations available through our roaming partners.The end point
     * provides flexible search criteria in order to get the list of Shell Recharge Network. The end
     * point provides the details such as the exact location/address of the site along with the
     * up-to-date status information of all the charging units in the site. Supported Search Options
     * * Based on status of the Charging units. Eg : Available or Occupied * Based on available
     * connector types. * Based on minimum Power output (in kW) available * Based on a specific
     * charging unit ID (EVSE ID).
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with the
     *         set of Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker response object
     * @param  evseId  Optional parameter: optional Standard EVSE (Electric Vehicle Supply
     *         Equipment) Id identifier (ISO-IEC-15118)
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given
     *         externalId. (Unique Location externalID provided by Shell Recharge)
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id. (Unique individual EVSE externalID provided by Shell Recharge)
     * @param  pageNumber  Optional parameter: Restrict the response list by providing a specific
     *         set of page Number. Set perPage parameter also when pageNumber is used.
     * @param  perPage  Optional parameter: Restrict the number of sites in reposne per page.
     * @param  updatedSince  Optional parameter: ZonedDateTime as string
     * @return    Returns the List of LocationResponeObject response from the API call
     */
    public CompletableFuture<List<LocationResponeObject>> getLocationsListAsync(
            final String requestId,
            final GetLocationsListEvseStatusEnum evseStatus,
            final GetLocationsListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetLocationsListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final String evseId,
            final String locationExternalId,
            final String evseExternalId,
            final Integer pageNumber,
            final Integer perPage,
            final String updatedSince) {
        try { 
            return prepareGetLocationsListRequest(requestId, evseStatus, connectorTypes, connectorMinPower,
            authorizationMethods, withOperatorName, evseId, locationExternalId, evseExternalId,
            pageNumber, perPage, updatedSince).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getLocationsList.
     */
    private ApiCall<List<LocationResponeObject>, ApiException> prepareGetLocationsListRequest(
            final String requestId,
            final GetLocationsListEvseStatusEnum evseStatus,
            final GetLocationsListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetLocationsListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final String evseId,
            final String locationExternalId,
            final String evseExternalId,
            final Integer pageNumber,
            final Integer perPage,
            final String updatedSince) throws IOException {
        return new ApiCall.Builder<List<LocationResponeObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/locations/v1/ev")
                        .queryParam(param -> param.key("evseStatus")
                                .value((evseStatus != null) ? evseStatus.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorTypes")
                                .value((connectorTypes != null) ? connectorTypes.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorMinPower")
                                .value(connectorMinPower).isRequired(false))
                        .queryParam(param -> param.key("authorizationMethods")
                                .value((authorizationMethods != null) ? authorizationMethods.value() : null).isRequired(false))
                        .queryParam(param -> param.key("withOperatorName")
                                .value(withOperatorName).isRequired(false))
                        .queryParam(param -> param.key("evseId")
                                .value(evseId).isRequired(false))
                        .queryParam(param -> param.key("locationExternalId")
                                .value(locationExternalId).isRequired(false))
                        .queryParam(param -> param.key("evseExternalId")
                                .value(evseExternalId).isRequired(false))
                        .queryParam(param -> param.key("pageNumber")
                                .value(pageNumber).isRequired(false))
                        .queryParam(param -> param.key("perPage")
                                .value(perPage).isRequired(false))
                        .queryParam(param -> param.key("updatedSince")
                                .value(updatedSince).isRequired(false))
                        .headerParam(param -> param.key("RequestId")
                                .value(requestId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        LocationResponeObject[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
                                (reason, context) -> new BadRequestException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("The request has not been applied because it lacks valid authentication credentials for the target resource.",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Location Not Found",
                                (reason, context) -> new NotFoundException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API provides the details on a single Shell Recharge location. The query for a single
     * location is to be made using the Unique Internal identifier used to refer to this Location by
     * Shell Recharge. (Uid from List of locations API).
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  id  Required parameter: Unique Uid of the location from List of locations API
     * @return    Returns the LocationResponeObject response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LocationResponeObject getLocationById(
            final String requestId,
            final String id) throws ApiException, IOException {
        return prepareGetLocationByIdRequest(requestId, id).execute();
    }

    /**
     * This API provides the details on a single Shell Recharge location. The query for a single
     * location is to be made using the Unique Internal identifier used to refer to this Location by
     * Shell Recharge. (Uid from List of locations API).
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  id  Required parameter: Unique Uid of the location from List of locations API
     * @return    Returns the LocationResponeObject response from the API call
     */
    public CompletableFuture<LocationResponeObject> getLocationByIdAsync(
            final String requestId,
            final String id) {
        try { 
            return prepareGetLocationByIdRequest(requestId, id).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getLocationById.
     */
    private ApiCall<LocationResponeObject, ApiException> prepareGetLocationByIdRequest(
            final String requestId,
            final String id) throws IOException {
        return new ApiCall.Builder<LocationResponeObject, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/locations/v1/ev/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("RequestId")
                                .value(requestId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LocationResponeObject.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
                                (reason, context) -> new BadRequestException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("The request has not been applied because it lacks valid authentication credentials for the target resource.",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Location Not Found",
                                (reason, context) -> new NotFoundException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API provides the list of all near by Shell Recharge locations based on the latitude and
     * longitude provided in the request. The list includes all Shell Recharge network and all sites
     * available through our roaming partners. The end point provides the details such as the exact
     * location/address of the site along with the up-to-date status information of all the charging
     * units in the site. Supported Search Options * Based on latitude and longitude of the
     * location. (Mandatory) * Based on status of the Charging units. Eg : Available or Occupied *
     * Based on available connector types. * Based on minimum Power output (in kW) available.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  latitude  Required parameter: Latitude to get Shell Recharge Locations nearby
     * @param  longitude  Required parameter: Longitude to get Shell Recharge Locations nearby
     * @param  limit  Optional parameter: Maximum number of Locations to retrieve
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given externalId
     *         Identifier as given by the Shell Recharge Operator, unique for that Operator
     * @param  evseId  Optional parameter: Filter by Locations that have an Evse with the given Evse
     *         Id
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id Identifier of the Evse as given by the Operator, unique for that
     *         Operator
     * @param  operatorName  Optional parameter: Filter by Locations that have the given operator
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with
     *         these Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker object (only for
     *         marker type SingleChargePoint)
     * @param  withMaxPower  Optional parameter: Return maximum power in kW across all locations
     *         grouped in this marker (disregarding availability)
     * @return    Returns the LocationResponeObject response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LocationResponeObject getNearbyLocations(
            final String requestId,
            final double latitude,
            final double longitude,
            final Double limit,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName,
            final GetNearbyLocationsEvseStatusEnum evseStatus,
            final GetNearbyLocationsConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetNearbyLocationsAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower) throws ApiException, IOException {
        return prepareGetNearbyLocationsRequest(requestId, latitude, longitude, limit,
                locationExternalId, evseId, evseExternalId, operatorName, evseStatus,
                connectorTypes, connectorMinPower, authorizationMethods, withOperatorName,
                withMaxPower).execute();
    }

    /**
     * This API provides the list of all near by Shell Recharge locations based on the latitude and
     * longitude provided in the request. The list includes all Shell Recharge network and all sites
     * available through our roaming partners. The end point provides the details such as the exact
     * location/address of the site along with the up-to-date status information of all the charging
     * units in the site. Supported Search Options * Based on latitude and longitude of the
     * location. (Mandatory) * Based on status of the Charging units. Eg : Available or Occupied *
     * Based on available connector types. * Based on minimum Power output (in kW) available.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  latitude  Required parameter: Latitude to get Shell Recharge Locations nearby
     * @param  longitude  Required parameter: Longitude to get Shell Recharge Locations nearby
     * @param  limit  Optional parameter: Maximum number of Locations to retrieve
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given externalId
     *         Identifier as given by the Shell Recharge Operator, unique for that Operator
     * @param  evseId  Optional parameter: Filter by Locations that have an Evse with the given Evse
     *         Id
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id Identifier of the Evse as given by the Operator, unique for that
     *         Operator
     * @param  operatorName  Optional parameter: Filter by Locations that have the given operator
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with
     *         these Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker object (only for
     *         marker type SingleChargePoint)
     * @param  withMaxPower  Optional parameter: Return maximum power in kW across all locations
     *         grouped in this marker (disregarding availability)
     * @return    Returns the LocationResponeObject response from the API call
     */
    public CompletableFuture<LocationResponeObject> getNearbyLocationsAsync(
            final String requestId,
            final double latitude,
            final double longitude,
            final Double limit,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName,
            final GetNearbyLocationsEvseStatusEnum evseStatus,
            final GetNearbyLocationsConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetNearbyLocationsAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower) {
        try { 
            return prepareGetNearbyLocationsRequest(requestId, latitude, longitude, limit,
            locationExternalId, evseId, evseExternalId, operatorName, evseStatus, connectorTypes,
            connectorMinPower, authorizationMethods, withOperatorName, withMaxPower).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getNearbyLocations.
     */
    private ApiCall<LocationResponeObject, ApiException> prepareGetNearbyLocationsRequest(
            final String requestId,
            final double latitude,
            final double longitude,
            final Double limit,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName,
            final GetNearbyLocationsEvseStatusEnum evseStatus,
            final GetNearbyLocationsConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetNearbyLocationsAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower) throws IOException {
        return new ApiCall.Builder<LocationResponeObject, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/locations/v1/ev/nearby")
                        .queryParam(param -> param.key("latitude")
                                .value(latitude).isRequired(false))
                        .queryParam(param -> param.key("longitude")
                                .value(longitude).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 25d).isRequired(false))
                        .queryParam(param -> param.key("locationExternalId")
                                .value(locationExternalId).isRequired(false))
                        .queryParam(param -> param.key("evseId")
                                .value(evseId).isRequired(false))
                        .queryParam(param -> param.key("evseExternalId")
                                .value(evseExternalId).isRequired(false))
                        .queryParam(param -> param.key("operatorName")
                                .value(operatorName).isRequired(false))
                        .queryParam(param -> param.key("evseStatus")
                                .value((evseStatus != null) ? evseStatus.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorTypes")
                                .value((connectorTypes != null) ? connectorTypes.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorMinPower")
                                .value(connectorMinPower).isRequired(false))
                        .queryParam(param -> param.key("authorizationMethods")
                                .value((authorizationMethods != null) ? authorizationMethods.value() : null).isRequired(false))
                        .queryParam(param -> param.key("withOperatorName")
                                .value(withOperatorName).isRequired(false))
                        .queryParam(param -> param.key("withMaxPower")
                                .value(withMaxPower).isRequired(false))
                        .headerParam(param -> param.key("RequestId")
                                .value(requestId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LocationResponeObject.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
                                (reason, context) -> new BadRequestException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("The request has not been applied because it lacks valid authentication credentials for the target resource.",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Location Not Found",
                                (reason, context) -> new NotFoundException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This API, when given a set of bounds on the geographical front (East,West, North, South) will
     * return a set of Markers that fall within the requested bounds. The API will automatically
     * group locations at the same position on the map into one Marker. The API also provide further
     * search options to filter the result set. * Based on status of the Charging units. Eg :
     * Available or Occupied * Based on available connector types. * Based on minimum Power output
     * (in kW) available.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  west  Required parameter: Longitude of the western bound to get the Shell Recharge
     *         Locations
     * @param  south  Required parameter: Latitude of the southern bound to get the Shell Recharge
     *         Locations
     * @param  east  Required parameter: Longitude of the eastern bound to get the Shell Recharge
     *         Locations
     * @param  north  Required parameter: Latitude of the northern bound to get the Shell Recharge
     *         Locations
     * @param  zoom  Required parameter: Zoom level to show ex: (1: World, 5: Landmass/continent,
     *         10: City, 15: Streets, 20: Buildings)
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with the
     *         set of Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker object (only for
     *         marker type SingleChargePoint)
     * @param  withMaxPower  Optional parameter: Return maximum power in kW across all locations
     *         grouped in this marker (disregarding availability)
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given
     *         externalId. (Unique Location externalID provided by Shell Recharge)
     * @param  evseId  Optional parameter: Filter by Locations that have an Evse with the given Evse
     *         Id
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id Identifier of the Evse as given by the Operator, unique for that
     *         Operator
     * @param  operatorName  Optional parameter: Filter by Locations that have the given operator
     * @return    Returns the List of MarkersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<MarkersResponse> getMarkersList(
            final String requestId,
            final double west,
            final double south,
            final double east,
            final double north,
            final String zoom,
            final GetMarkersListEvseStatusEnum evseStatus,
            final GetMarkersListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetMarkersListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName) throws ApiException, IOException {
        return prepareGetMarkersListRequest(requestId, west, south, east, north, zoom, evseStatus,
                connectorTypes, connectorMinPower, authorizationMethods, withOperatorName,
                withMaxPower, locationExternalId, evseId, evseExternalId, operatorName).execute();
    }

    /**
     * This API, when given a set of bounds on the geographical front (East,West, North, South) will
     * return a set of Markers that fall within the requested bounds. The API will automatically
     * group locations at the same position on the map into one Marker. The API also provide further
     * search options to filter the result set. * Based on status of the Charging units. Eg :
     * Available or Occupied * Based on available connector types. * Based on minimum Power output
     * (in kW) available.
     * @param  requestId  Required parameter: A unique request id in GUID format. The value is
     *         written to the Shell API Platform audit log for end to end traceability of a request.
     * @param  west  Required parameter: Longitude of the western bound to get the Shell Recharge
     *         Locations
     * @param  south  Required parameter: Latitude of the southern bound to get the Shell Recharge
     *         Locations
     * @param  east  Required parameter: Longitude of the eastern bound to get the Shell Recharge
     *         Locations
     * @param  north  Required parameter: Latitude of the northern bound to get the Shell Recharge
     *         Locations
     * @param  zoom  Required parameter: Zoom level to show ex: (1: World, 5: Landmass/continent,
     *         10: City, 15: Streets, 20: Buildings)
     * @param  evseStatus  Optional parameter: Filter by Locations that have the given status
     * @param  connectorTypes  Optional parameter: Filter by Locations that have Connectors with the
     *         set of Connector Types
     * @param  connectorMinPower  Optional parameter: Filter by Locations that have a Connector with
     *         at least this power output (in kW)
     * @param  authorizationMethods  Optional parameter: Filter by Locations that support the given
     *         Authorization Methods
     * @param  withOperatorName  Optional parameter: Return operator name in marker object (only for
     *         marker type SingleChargePoint)
     * @param  withMaxPower  Optional parameter: Return maximum power in kW across all locations
     *         grouped in this marker (disregarding availability)
     * @param  locationExternalId  Optional parameter: Filter by Locations with the given
     *         externalId. (Unique Location externalID provided by Shell Recharge)
     * @param  evseId  Optional parameter: Filter by Locations that have an Evse with the given Evse
     *         Id
     * @param  evseExternalId  Optional parameter: Filter by Locations that have an Evse with the
     *         given External Id Identifier of the Evse as given by the Operator, unique for that
     *         Operator
     * @param  operatorName  Optional parameter: Filter by Locations that have the given operator
     * @return    Returns the List of MarkersResponse response from the API call
     */
    public CompletableFuture<List<MarkersResponse>> getMarkersListAsync(
            final String requestId,
            final double west,
            final double south,
            final double east,
            final double north,
            final String zoom,
            final GetMarkersListEvseStatusEnum evseStatus,
            final GetMarkersListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetMarkersListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName) {
        try { 
            return prepareGetMarkersListRequest(requestId, west, south, east, north, zoom, evseStatus,
            connectorTypes, connectorMinPower, authorizationMethods, withOperatorName, withMaxPower,
            locationExternalId, evseId, evseExternalId, operatorName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getMarkersList.
     */
    private ApiCall<List<MarkersResponse>, ApiException> prepareGetMarkersListRequest(
            final String requestId,
            final double west,
            final double south,
            final double east,
            final double north,
            final String zoom,
            final GetMarkersListEvseStatusEnum evseStatus,
            final GetMarkersListConnectorTypesEnum connectorTypes,
            final Double connectorMinPower,
            final GetMarkersListAuthorizationMethodsEnum authorizationMethods,
            final Boolean withOperatorName,
            final Boolean withMaxPower,
            final String locationExternalId,
            final String evseId,
            final String evseExternalId,
            final String operatorName) throws IOException {
        return new ApiCall.Builder<List<MarkersResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/locations/v1/ev/markers")
                        .queryParam(param -> param.key("west")
                                .value(west).isRequired(false))
                        .queryParam(param -> param.key("south")
                                .value(south).isRequired(false))
                        .queryParam(param -> param.key("east")
                                .value(east).isRequired(false))
                        .queryParam(param -> param.key("north")
                                .value(north).isRequired(false))
                        .queryParam(param -> param.key("zoom")
                                .value(zoom))
                        .queryParam(param -> param.key("evseStatus")
                                .value((evseStatus != null) ? evseStatus.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorTypes")
                                .value((connectorTypes != null) ? connectorTypes.value() : null).isRequired(false))
                        .queryParam(param -> param.key("connectorMinPower")
                                .value(connectorMinPower).isRequired(false))
                        .queryParam(param -> param.key("authorizationMethods")
                                .value((authorizationMethods != null) ? authorizationMethods.value() : null).isRequired(false))
                        .queryParam(param -> param.key("withOperatorName")
                                .value(withOperatorName).isRequired(false))
                        .queryParam(param -> param.key("withMaxPower")
                                .value(withMaxPower).isRequired(false))
                        .queryParam(param -> param.key("locationExternalId")
                                .value(locationExternalId).isRequired(false))
                        .queryParam(param -> param.key("evseId")
                                .value(evseId).isRequired(false))
                        .queryParam(param -> param.key("evseExternalId")
                                .value(evseExternalId).isRequired(false))
                        .queryParam(param -> param.key("operatorName")
                                .value(operatorName).isRequired(false))
                        .headerParam(param -> param.key("RequestId")
                                .value(requestId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("BearerAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response
,                                         MarkersResponse[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
                                (reason, context) -> new BadRequestException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("The request has not been applied because it lacks valid authentication credentials for the target resource.",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Location Not Found",
                                (reason, context) -> new NotFoundException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}