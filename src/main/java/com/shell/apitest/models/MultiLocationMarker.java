/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for MultiLocationMarker type.
 */
public class MultiLocationMarker {
    private String markerType;
    private String uniqueKey;
    private Coordinates coordinates;
    private Double locationCount;
    private Double evseCount;
    private Double maxPower;
    private String geoHash;

    /**
     * Default constructor.
     */
    public MultiLocationMarker() {
    }

    /**
     * Initialization constructor.
     * @param  markerType  String value for markerType.
     * @param  uniqueKey  String value for uniqueKey.
     * @param  coordinates  Coordinates value for coordinates.
     * @param  locationCount  Double value for locationCount.
     * @param  evseCount  Double value for evseCount.
     * @param  maxPower  Double value for maxPower.
     * @param  geoHash  String value for geoHash.
     */
    public MultiLocationMarker(
            String markerType,
            String uniqueKey,
            Coordinates coordinates,
            Double locationCount,
            Double evseCount,
            Double maxPower,
            String geoHash) {
        this.markerType = markerType;
        this.uniqueKey = uniqueKey;
        this.coordinates = coordinates;
        this.locationCount = locationCount;
        this.evseCount = evseCount;
        this.maxPower = maxPower;
        this.geoHash = geoHash;
    }

    /**
     * Initialization constructor.
     * @param  markerType  String value for markerType.
     */
    @JsonCreator
    protected MultiLocationMarker(
            @JsonProperty("markerType") String markerType) {
        this(markerType, null, null, null, null, null, null);
    }

    /**
     * Getter for MarkerType.
     * Identifies the marker type. If it's a `MultiLocationMarker`, then the value is
     * `MultiLocation`
     * @return Returns the String
     */
    @JsonGetter("markerType")
    public String getMarkerType() {
        return markerType;
    }

    /**
     * Setter for MarkerType.
     * Identifies the marker type. If it's a `MultiLocationMarker`, then the value is
     * `MultiLocation`
     * @param markerType Value for String
     */
    @JsonSetter("markerType")
    public void setMarkerType(String markerType) {
        this.markerType = markerType;
    }

    /**
     * Getter for UniqueKey.
     * Uniquely identifies the marker object
     * @return Returns the String
     */
    @JsonGetter("uniqueKey")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUniqueKey() {
        return uniqueKey;
    }

    /**
     * Setter for UniqueKey.
     * Uniquely identifies the marker object
     * @param uniqueKey Value for String
     */
    @JsonSetter("uniqueKey")
    public void setUniqueKey(String uniqueKey) {
        this.uniqueKey = uniqueKey;
    }

    /**
     * Getter for Coordinates.
     * Coordinates of the Shell Recharge Site Location
     * @return Returns the Coordinates
     */
    @JsonGetter("coordinates")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Coordinates getCoordinates() {
        return coordinates;
    }

    /**
     * Setter for Coordinates.
     * Coordinates of the Shell Recharge Site Location
     * @param coordinates Value for Coordinates
     */
    @JsonSetter("coordinates")
    public void setCoordinates(Coordinates coordinates) {
        this.coordinates = coordinates;
    }

    /**
     * Getter for LocationCount.
     * Number of Locations that this Marker represents in the given set of bounds
     * @return Returns the Double
     */
    @JsonGetter("locationCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLocationCount() {
        return locationCount;
    }

    /**
     * Setter for LocationCount.
     * Number of Locations that this Marker represents in the given set of bounds
     * @param locationCount Value for Double
     */
    @JsonSetter("locationCount")
    public void setLocationCount(Double locationCount) {
        this.locationCount = locationCount;
    }

    /**
     * Getter for EvseCount.
     * Total number of Evses in Locations that this Marker represents
     * @return Returns the Double
     */
    @JsonGetter("evseCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEvseCount() {
        return evseCount;
    }

    /**
     * Setter for EvseCount.
     * Total number of Evses in Locations that this Marker represents
     * @param evseCount Value for Double
     */
    @JsonSetter("evseCount")
    public void setEvseCount(Double evseCount) {
        this.evseCount = evseCount;
    }

    /**
     * Getter for MaxPower.
     * Maximum power in kW across all locations grouped in this marker (disregarding availability)
     * @return Returns the Double
     */
    @JsonGetter("maxPower")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getMaxPower() {
        return maxPower;
    }

    /**
     * Setter for MaxPower.
     * Maximum power in kW across all locations grouped in this marker (disregarding availability)
     * @param maxPower Value for Double
     */
    @JsonSetter("maxPower")
    public void setMaxPower(Double maxPower) {
        this.maxPower = maxPower;
    }

    /**
     * Getter for GeoHash.
     * GeoHash of marker coordinates
     * @return Returns the String
     */
    @JsonGetter("geoHash")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGeoHash() {
        return geoHash;
    }

    /**
     * Setter for GeoHash.
     * GeoHash of marker coordinates
     * @param geoHash Value for String
     */
    @JsonSetter("geoHash")
    public void setGeoHash(String geoHash) {
        this.geoHash = geoHash;
    }

    /**
     * Converts this MultiLocationMarker into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MultiLocationMarker [" + "markerType=" + markerType + ", uniqueKey=" + uniqueKey
                + ", coordinates=" + coordinates + ", locationCount=" + locationCount
                + ", evseCount=" + evseCount + ", maxPower=" + maxPower + ", geoHash=" + geoHash
                + "]";
    }

    /**
     * Builds a new {@link MultiLocationMarker.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MultiLocationMarker.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(markerType)
                .uniqueKey(getUniqueKey())
                .coordinates(getCoordinates())
                .locationCount(getLocationCount())
                .evseCount(getEvseCount())
                .maxPower(getMaxPower())
                .geoHash(getGeoHash());
        return builder;
    }

    /**
     * Class to build instances of {@link MultiLocationMarker}.
     */
    public static class Builder {
        private String markerType;
        private String uniqueKey;
        private Coordinates coordinates;
        private Double locationCount;
        private Double evseCount;
        private Double maxPower;
        private String geoHash;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  markerType  String value for markerType.
         */
        public Builder(String markerType) {
            this.markerType = markerType;
        }

        /**
         * Setter for markerType.
         * @param  markerType  String value for markerType.
         * @return Builder
         */
        public Builder markerType(String markerType) {
            this.markerType = markerType;
            return this;
        }

        /**
         * Setter for uniqueKey.
         * @param  uniqueKey  String value for uniqueKey.
         * @return Builder
         */
        public Builder uniqueKey(String uniqueKey) {
            this.uniqueKey = uniqueKey;
            return this;
        }

        /**
         * Setter for coordinates.
         * @param  coordinates  Coordinates value for coordinates.
         * @return Builder
         */
        public Builder coordinates(Coordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }

        /**
         * Setter for locationCount.
         * @param  locationCount  Double value for locationCount.
         * @return Builder
         */
        public Builder locationCount(Double locationCount) {
            this.locationCount = locationCount;
            return this;
        }

        /**
         * Setter for evseCount.
         * @param  evseCount  Double value for evseCount.
         * @return Builder
         */
        public Builder evseCount(Double evseCount) {
            this.evseCount = evseCount;
            return this;
        }

        /**
         * Setter for maxPower.
         * @param  maxPower  Double value for maxPower.
         * @return Builder
         */
        public Builder maxPower(Double maxPower) {
            this.maxPower = maxPower;
            return this;
        }

        /**
         * Setter for geoHash.
         * @param  geoHash  String value for geoHash.
         * @return Builder
         */
        public Builder geoHash(String geoHash) {
            this.geoHash = geoHash;
            return this;
        }

        /**
         * Builds a new {@link MultiLocationMarker} object using the set fields.
         * @return {@link MultiLocationMarker}
         */
        public MultiLocationMarker build() {
            return new MultiLocationMarker(markerType, uniqueKey, coordinates, locationCount,
                    evseCount, maxPower, geoHash);
        }
    }
}
