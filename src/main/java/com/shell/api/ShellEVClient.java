/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.api;

import com.shell.api.authentication.ClientCredentialsAuthManager;
import com.shell.api.authentication.ClientCredentialsAuthModel;
import com.shell.api.controllers.ChargingController;
import com.shell.api.controllers.LocationsController;
import com.shell.api.controllers.OAuthAuthorizationController;
import com.shell.api.http.client.HttpCallback;
import com.shell.api.http.client.HttpClientConfiguration;
import com.shell.api.http.client.ReadonlyHttpClientConfiguration;
import com.shell.api.models.OAuthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class ShellEVClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private LocationsController locations;
    private ChargingController charging;
    private OAuthAuthorizationController oAuthAuthorization;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * ClientCredentialsAuthManager.
     */
    private ClientCredentialsAuthManager clientCredentialsAuthManager;

    /**
     * The instance of ClientCredentialsAuthModel.
     */
    private ClientCredentialsAuthModel clientCredentialsAuthModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private ShellEVClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            ClientCredentialsAuthModel clientCredentialsAuthModel, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.clientCredentialsAuthModel = clientCredentialsAuthModel;

        this.clientCredentialsAuthManager = new ClientCredentialsAuthManager(
                clientCredentialsAuthModel);
        this.authentications.put("BearerAuth", clientCredentialsAuthManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        this.clientCredentialsAuthManager.applyGlobalConfiguration(globalConfig);

        locations = new LocationsController(globalConfig);
        charging = new ChargingController(globalConfig);
        oAuthAuthorization = new OAuthAuthorizationController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of LocationsController.
     * @return locations
     */
    public LocationsController getLocationsController() {
        return locations;
    }

    /**
     * Get the instance of ChargingController.
     * @return charging
     */
    public ChargingController getChargingController() {
        return charging;
    }

    /**
     * Get the instance of OAuthAuthorizationController.
     * @return oAuthAuthorization
     */
    public OAuthAuthorizationController getOAuthAuthorizationController() {
        return oAuthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with ClientCredentialsAuth.
     * @return clientCredentialsAuth
     */
    public ClientCredentialsAuth getClientCredentialsAuth() {
        return clientCredentialsAuthManager;
    }

    /**
     * The auth credential model for ClientCredentialsAuth.
     * @return the instance of ClientCredentialsAuthModel
     */
    public ClientCredentialsAuthModel getClientCredentialsAuthModel() {
        return clientCredentialsAuthModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.shell.com/ev/v1";
            }
            if (server.equals(Server.ACCESS_TOKEN_SERVER)) {
                return "https://api.shell.com/v1/oauth";
            }
        }
        if (environment.equals(Environment.ENVIRONMENT2)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api-test.shell.com/ev/v1";
            }
            if (server.equals(Server.ACCESS_TOKEN_SERVER)) {
                return "https://api.shell.com/v1/oauth";
            }
        }
        return "https://api.shell.com/ev/v1";
    }

    /**
     * Converts this ShellEVClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ShellEVClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link ShellEVClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link ShellEVClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.clientCredentialsAuth(getClientCredentialsAuthModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link ShellEVClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private ClientCredentialsAuthModel clientCredentialsAuthModel =
                new ClientCredentialsAuthModel.Builder("", "").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for ClientCredentialsAuth.
         * @param oAuthClientId String value for oAuthClientId.
         * @param oAuthClientSecret String value for oAuthClientSecret.
         * @deprecated This builder method is deprecated.
         * Use {@link #clientCredentialsAuth(ClientCredentialsAuthModel) clientCredentialsAuth} instead.
         * @return The current instance of builder.
         */
        @Deprecated
        public Builder clientCredentialsAuthCredentials(String oAuthClientId,
                String oAuthClientSecret) {
            clientCredentialsAuthModel = clientCredentialsAuthModel.toBuilder()
                .oAuthClientId(oAuthClientId)
                .oAuthClientSecret(oAuthClientSecret)
                .build();
            return this;
        }

        /**
         * Credentials setter for ClientCredentialsAuth.
         * @param oAuthToken OAuthToken value for oAuthToken.
         * @deprecated This builder method is deprecated.
         * Use {@link #clientCredentialsAuth(ClientCredentialsAuthModel) clientCredentialsAuth} instead.
         * @return Builder
         */
        @Deprecated
        public Builder oAuthToken(OAuthToken oAuthToken) {
            clientCredentialsAuthModel = clientCredentialsAuthModel.toBuilder()
                .oAuthToken(oAuthToken)
                .build();
            return this;
        }

        /**
         * Credentials setter for ClientCredentialsAuth.
         * @param clientCredentialsAuthModel The instance of ClientCredentialsAuthModel.
         * @return The current instance of builder.
         */
        public Builder clientCredentialsAuth(
                ClientCredentialsAuthModel clientCredentialsAuthModel) {
            this.clientCredentialsAuthModel = clientCredentialsAuthModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new ShellEVClient object using the set fields.
         * @return ShellEVClient
         */
        public ShellEVClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new ShellEVClient(environment, httpClient, httpClientConfig,
                    clientCredentialsAuthModel, httpCallback);
        }
    }
}