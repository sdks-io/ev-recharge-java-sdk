/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.shell.api.ApiHelper;
import com.shell.api.models.MultiLocationMarker;
import com.shell.api.models.SingleLocationMarker;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = LocationMarker.LocationMarkerDeserializer.class)
public abstract class LocationMarker {
    
    /**
     * This is SingleLocationMarker case.
     * @param singleLocationMarker SingleLocationMarker value for singleLocationMarker.
     * @return The SingleLocationMarkerCase object.
     */
    public static LocationMarker fromSingleLocationMarker(
            SingleLocationMarker singleLocationMarker) {
        return singleLocationMarker == null ? null : new SingleLocationMarkerCase(singleLocationMarker);
    }

    /**
     * This is MultiLocationMarker case.
     * @param multiLocationMarker MultiLocationMarker value for multiLocationMarker.
     * @return The MultiLocationMarkerCase object.
     */
    public static LocationMarker fromMultiLocationMarker(MultiLocationMarker multiLocationMarker) {
        return multiLocationMarker == null ? null : new MultiLocationMarkerCase(multiLocationMarker);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R singleLocationMarker(SingleLocationMarker singleLocationMarker);

        R multiLocationMarker(MultiLocationMarker multiLocationMarker);
    }

    /**
     * This is a implementation class for SingleLocationMarkerCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SingleLocationMarker")
    private static class SingleLocationMarkerCase extends LocationMarker {

        @JsonValue
        private SingleLocationMarker singleLocationMarker;

        SingleLocationMarkerCase(SingleLocationMarker singleLocationMarker) {
            this.singleLocationMarker = singleLocationMarker;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.singleLocationMarker(this.singleLocationMarker);
        }

        @JsonCreator
        private SingleLocationMarkerCase(JsonNode jsonNode) throws IOException {
            this.singleLocationMarker = ApiHelper.deserialize(jsonNode,
                SingleLocationMarker.class);
        }

        @Override
        public String toString() {
            return singleLocationMarker.toString();
        }
    }

    /**
     * This is a implementation class for MultiLocationMarkerCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MultiLocationMarker")
    private static class MultiLocationMarkerCase extends LocationMarker {

        @JsonValue
        private MultiLocationMarker multiLocationMarker;

        MultiLocationMarkerCase(MultiLocationMarker multiLocationMarker) {
            this.multiLocationMarker = multiLocationMarker;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.multiLocationMarker(this.multiLocationMarker);
        }

        @JsonCreator
        private MultiLocationMarkerCase(JsonNode jsonNode) throws IOException {
            this.multiLocationMarker = ApiHelper.deserialize(jsonNode,
                MultiLocationMarker.class);
        }

        @Override
        public String toString() {
            return multiLocationMarker.toString();
        }
    }

    /**
     * This is a custom deserializer class for LocationMarker.
     */
    protected static class LocationMarkerDeserializer
            extends JsonDeserializer<LocationMarker> {

        private String discriminator = "markerType";
        private List<Map<String, Class<? extends LocationMarker>>> registry =
                Arrays.asList(
                        Collections.singletonMap("SingleLocation", SingleLocationMarkerCase.class),
                        Collections.singletonMap("MultiLocation", MultiLocationMarkerCase.class));

        @Override
        public LocationMarker deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            return ApiHelper.deserialize(jp, ctxt, discriminator, registry, null, true);
        }
    }

}
